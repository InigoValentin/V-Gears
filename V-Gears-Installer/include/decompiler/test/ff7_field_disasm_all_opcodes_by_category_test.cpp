#include <gmock/gmock.h>

#include "../../common/Lzs.h"
#include "decompiler/ff7_field/ff7_field_disassembler.h"
#include "decompiler/ff7_field/ff7_field_engine.h"
#include "decompiler/ff7_field/ff7_field_codegen.h"
#include "control_flow.h"
#include "util.h"
#include "ff7_field_dummy_formatter.h"

#define FLOW_BASE 0
#define FLOW_LABELS 13
#define FLOW_OPCODES (1/*init RET*/ + 37/*main, incl labels*/ - FLOW_LABELS)
#define MODULE_BASE (FLOW_BASE + FLOW_OPCODES + 1/*init RET*/)
#define MODULE_OPCODES 25
#define MATH_BASE (MODULE_BASE + MODULE_OPCODES + 1/*init RET*/)
#define MATH_OPCODES 40
#define WINDOW_BASE (MATH_BASE + MATH_OPCODES + 1/*init RET*/)
#define WINDOW_OPCODES 21
#define PARTY_BASE (WINDOW_BASE + WINDOW_OPCODES + 1/*init RET*/)
#define PARTY_OPCODES 26
#define MODEL_BASE (PARTY_BASE + PARTY_OPCODES + 1/*init RET*/)
#define MODEL_OPCODES 70
#define WALKMESH_BASE (MODEL_BASE + MODEL_OPCODES + 1/*init RET*/)
#define WALKMESH_OPCODES 6
#define BACKGND_BASE (WALKMESH_BASE + WALKMESH_OPCODES + 1/*init RET*/)
#define BACKGND_OPCODES 19
#define CAMERA_BASE (BACKGND_BASE + BACKGND_OPCODES + 1/*init RET*/)
#define CAMERA_OPCODES 15
#define AV_BASE (CAMERA_BASE + CAMERA_OPCODES + 1/*init RET*/)
#define AV_OPCODES 16
#define UNCAT_BASE (AV_BASE + AV_OPCODES + 1/*init RET*/)
#define UNCAT_OPCODES 4

#define MAKE_SUBOPCODE(high, low) ((uint16)(((uint8)(low)) | ((uint16)((uint8)(high))) << 8))

#define ASSERT_OP_LEN(opcode, length) \
    ASSERT_EQ(insts[index]->_opcode, (opcode)); \
    ASSERT_EQ(insts[index]->_params.size(), (length)); \
    paramIndex = 0

#define ASSERT_OP_SUBOP_LEN(opcode, subopcode, length) \
    ASSERT_EQ(insts[index]->_opcode, MAKE_SUBOPCODE((opcode), (subopcode))); \
    ASSERT_EQ(insts[index]->_params.size(), (length)); \
    paramIndex = 0

#define ASSERT_PARAM_UNSIGNED(value) ASSERT_EQ(insts[index]->_params[paramIndex++]->getUnsigned(), (value))
#define ASSERT_PARAM_SIGNED(value) ASSERT_EQ(insts[index]->_params[paramIndex++]->getSigned(), (value))


void checkFlow(const InstVec& insts);
void checkModule(const InstVec& insts);
void checkMath(const InstVec& insts);
void checkWindow(const InstVec& insts);
void checkParty(const InstVec& insts);
void checkModel(const InstVec& insts);
void checkWalkmesh(const InstVec& insts);
void checkBackgnd(const InstVec& insts);
void checkCamera(const InstVec& insts);
void checkAv(const InstVec& insts);
void checkUncat(const InstVec& insts);

TEST(FF7Field, BugFixes)
{

    auto scriptBytes = Lzs::Decompress(BinaryReader::ReadAll("decompiler/test/bug_fixes.dat"));

    // Remove section pointers, leave everything after the script data as this doesn't matter
    const int kNumSections = 7;
    scriptBytes.erase(scriptBytes.begin(), scriptBytes.begin() + kNumSections * sizeof(uint32));
    DummyFormatter formatter;
    SUDM::FF7::Field::DecompiledScript ds = SUDM::FF7::Field::Decompile("bug_fixes", scriptBytes, formatter, "", "EntityContainer = {}\n\n");
    ASSERT_FALSE(ds.luaScript.empty());

    // TODO: This check should be more robust
    std::string expected =
        "        self.BugTest:set_talkable( true )\n"
        "        self.BugTest:set_talkable( false )\n"
        "        self.BugTest:set_talkable( false )\n"
        "        self.BugTest:set_visible( false )\n"
        "        self.BugTest:set_visible( true )\n"
        "        self.BugTest:set_visible( true )\n"
        "        self.BugTest:set_solid( true )\n"
        "        self.BugTest:set_solid( false )\n"
        "        self.BugTest:set_solid( false )\n";
    ASSERT_NE(std::string::npos, ds.luaScript.find(expected));

    std::ofstream tmp("bug_fixes.lua");
    if (!tmp.is_open())
    {
        throw std::runtime_error("Can't open bug_fixes.lua for writing");
    }

    tmp << ds.luaScript;

}


TEST(FF7Field, DisasmAllOpcodes)
{
    std::ofstream tmp("ff7_all_opcodes_by_category.fieldasm");
    if (!tmp.is_open())
    {
        throw std::runtime_error("Can't open ff7_all_opcodes_by_category.fieldasm for writing");
    }

    InstVec insts;
    DummyFormatter formatter;
    FieldEngine engine(formatter, "test");

    auto d = engine.GetDisassembler(insts);
    d->open("decompiler/test/ff7_all_opcodes_by_category.dat");
    d->disassemble();
    d->dumpDisassembly(tmp);
    tmp << std::endl;

    checkFlow(insts);
    checkModule(insts);
    checkMath(insts);
    checkWindow(insts);
    checkParty(insts);
    checkModel(insts);
    checkWalkmesh(insts);
    checkBackgnd(insts);
    checkCamera(insts);
    checkAv(insts);
    checkUncat(insts);
}



void checkFlow(const InstVec& insts)
{
    int index = FLOW_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::RET, 0);
    index++;
    
    ASSERT_OP_LEN(OPCODE::REQ, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::REQSW, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::REQEW, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::PREQ, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::PRQSW, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::PRQEW, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::RETTO, 2);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(0);
    index++;

    ASSERT_OP_LEN(OPCODE::JMPF, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::JMPFL, 1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::JMPB, 1);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::JMPBL, 1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::IFUB, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IFUBL, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::IFSW, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IFSWL, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::IFUW, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IFUWL, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::WAIT, 1);
    ASSERT_PARAM_UNSIGNED(1000);
    index++;

    ASSERT_OP_LEN(OPCODE::IFKEY, 2);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IFKEYON, 2);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IFKEYOFF, 2);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::NOP, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::IFPRTYQ, 2);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IFMEMBQ, 2);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(1);
    index++;
}


void checkModule(const InstVec& insts)
{
    int index = MODULE_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::DSKCG, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::ARROW, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::PNAME, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::GMSPD, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::SMSPD, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::FLMAT, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::FLITM, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::BTLCK, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::MVLCK, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::SPCNM, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::RSGLB, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::SPECIAL, OPCODE_SPECIAL::CLITM, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::MINIGAME, 6);
    ASSERT_PARAM_UNSIGNED(786);
    ASSERT_PARAM_SIGNED(-2000);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_UNSIGNED(4000);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    index++;

    ASSERT_OP_LEN(OPCODE::BTMD2, 1);
    ASSERT_PARAM_UNSIGNED(0xFFFFFFFF);
    index++;

    ASSERT_OP_LEN(OPCODE::BTRLD, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::BTLTB, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::MAPJUMP, 5);
    ASSERT_PARAM_UNSIGNED(786);
    ASSERT_PARAM_SIGNED(-2000);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_UNSIGNED(4000);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::LSTMP, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::BATTLE, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    index++;

    ASSERT_OP_LEN(OPCODE::BTLON, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::BTLMD, 1);
    ASSERT_PARAM_UNSIGNED(0xFFFF);
    index++;

    ASSERT_OP_LEN(OPCODE::MPJPO, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::PMJMP, 1);
    ASSERT_PARAM_UNSIGNED(786);
    index++;

    ASSERT_OP_LEN(OPCODE::PMJMP2, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::GAMEOVER, 0);
    index++;
}


void checkMath(const InstVec& insts)
{
    int index = MATH_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::PLUS_, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::PLUS2_, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MINUS_, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MINUS2_, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::INC_, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::INC2_, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::DEC_, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::DEC2_, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::RDMSD, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::SETBYTE, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::SETWORD, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::BITON, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::BITOFF, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::BITXOR, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::PLUS, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::PLUS2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MINUS, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MINUS2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MUL, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MUL2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::DIV, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::DIV2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MOD, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MOD2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::AND, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::AND2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::OR, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::OR2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::XOR, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::XOR2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::INC, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::INC2, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::DEC, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::DEC2, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::RANDOM, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::LBYTE, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::HBYTE, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::TWOBYTE, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::SIN, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5000);
    ASSERT_PARAM_UNSIGNED(6000);
    ASSERT_PARAM_UNSIGNED(7000);
    ASSERT_PARAM_UNSIGNED(8);
    index++;

    ASSERT_OP_LEN(OPCODE::COS, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5000);
    ASSERT_PARAM_UNSIGNED(6000);
    ASSERT_PARAM_UNSIGNED(7000);
    ASSERT_PARAM_UNSIGNED(8);
    index++;
}


void checkWindow(const InstVec& insts)
{
    int index = WINDOW_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::TUTOR, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::WCLS, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::WSIZW, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2000);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4000);
    ASSERT_PARAM_UNSIGNED(5000);
    index++;

    ASSERT_OP_LEN(OPCODE::WSPCL, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::WNUMB, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4000);
    ASSERT_PARAM_UNSIGNED(5000);
    ASSERT_PARAM_UNSIGNED(6);
    index++;

    ASSERT_OP_LEN(OPCODE::STTIM, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::MESSAGE, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::MPARA, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::MPRA2, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::MPNAM, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::ASK, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::MENU, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MENU2, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::WINDOW, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2000);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4000);
    ASSERT_PARAM_UNSIGNED(5000);
    index++;

    ASSERT_OP_LEN(OPCODE::WMOVE, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_SIGNED(-2000);
    ASSERT_PARAM_SIGNED(-3000);
    index++;

    ASSERT_OP_LEN(OPCODE::WMODE, 3);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::WREST, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::WCLSE, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::WROW, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::GWCOL, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    index++;

    ASSERT_OP_LEN(OPCODE::SWCOL, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    index++;
}


void checkParty(const InstVec& insts)
{
    int index = PARTY_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::SPTYE, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::GTPYE, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::GOLDU, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4000);
    index++;

    ASSERT_OP_LEN(OPCODE::GOLDD, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4000);
    index++;

    ASSERT_OP_LEN(OPCODE::CHGLD, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::HMPMAX1, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::HMPMAX2, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::MHMMX, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::HMPMAX3, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::MPU, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4000);
    index++;

    ASSERT_OP_LEN(OPCODE::MPD, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4000);
    index++;

    ASSERT_OP_LEN(OPCODE::HPU, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4000);
    index++;

    ASSERT_OP_LEN(OPCODE::HPD, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4000);
    index++;

    ASSERT_OP_LEN(OPCODE::STITM, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::DLITM, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::CKITM, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::SMTRA, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    index++;

    ASSERT_OP_LEN(OPCODE::DMTRA, 9);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    index++;

    ASSERT_OP_LEN(OPCODE::CMTRA, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    ASSERT_PARAM_UNSIGNED(11);
    ASSERT_PARAM_UNSIGNED(12);
    index++;

    ASSERT_OP_LEN(OPCODE::GETPC, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::PRTYP, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::PRTYM, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::PRTYE, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::MMBUD, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::MMBLK, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::MMBUK, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;
}


void checkModel(const InstVec& insts)
{
    int index = MODEL_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::JOIN, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::SPLIT, 13);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_SIGNED(-7000);
    ASSERT_PARAM_SIGNED(-8000);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_SIGNED(-10000);
    ASSERT_PARAM_SIGNED(-11000);
    ASSERT_PARAM_UNSIGNED(12);
    ASSERT_PARAM_UNSIGNED(13);
    index++;

    ASSERT_OP_LEN(OPCODE::BLINK, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::EYETX, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(72);
    ASSERT_PARAM_UNSIGNED(137);
    ASSERT_PARAM_UNSIGNED(206);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::TRNSP, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::AMBNT, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(232);
    ASSERT_PARAM_UNSIGNED(111);
    ASSERT_PARAM_UNSIGNED(112);
    ASSERT_PARAM_UNSIGNED(12);
    ASSERT_PARAM_UNSIGNED(219);
    ASSERT_PARAM_UNSIGNED(139);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown03, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown04, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown05, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::LIGHT, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown07, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown08, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown09, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::SBOBJ, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown0B, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::Unknown0C, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::SHINE, 0);
    index++;

    ASSERT_OP_SUBOP_LEN(OPCODE::KAWAI, OPCODE_KAWAI::RESET, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::KAWIW, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::PMOVA, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::PDIRA, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::PTURA, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::PGTDR, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::PXYZI, 9);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    index++;

    ASSERT_OP_LEN(OPCODE::TLKON, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::PC, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::opCodeCHAR, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::DFANM, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::ANIME1, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::VISI, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::XYZI, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_SIGNED(-7000);
    ASSERT_PARAM_UNSIGNED(8000);
    index++;

    ASSERT_OP_LEN(OPCODE::XYI, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_UNSIGNED(7000);
    index++;

    ASSERT_OP_LEN(OPCODE::XYZ, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_SIGNED(-7000);
    index++;

    ASSERT_OP_LEN(OPCODE::MOVE, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_SIGNED(-4000);
    index++;

    ASSERT_OP_LEN(OPCODE::CMOVE, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_SIGNED(-4000);
    index++;

    ASSERT_OP_LEN(OPCODE::MOVA, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::TURA, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::ANIMW, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::FMOVE, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_SIGNED(-4000);
    index++;

    ASSERT_OP_LEN(OPCODE::ANIME2, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::ANIM_1, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::CANIM1, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::CANM_1, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::MSPED, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    index++;

    ASSERT_OP_LEN(OPCODE::DIR, 2);
    ASSERT_PARAM_UNSIGNED(0x12);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::TURNGEN, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    index++;

    ASSERT_OP_LEN(OPCODE::TURN, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    index++;

    ASSERT_OP_LEN(OPCODE::DIRA, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::GETDIR, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::GETAXY, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::GETAI, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::ANIM_2, 2);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::CANIM2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::CANM_2, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::ASPED, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    index++;

    ASSERT_OP_LEN(OPCODE::CC, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::JUMP, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_UNSIGNED(7000);
    ASSERT_PARAM_UNSIGNED(8000);
    index++;

    ASSERT_OP_LEN(OPCODE::AXYZI, 9);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    index++;

    ASSERT_OP_LEN(OPCODE::LADER, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_SIGNED(-7000);
    ASSERT_PARAM_UNSIGNED(8000);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    ASSERT_PARAM_UNSIGNED(11);
    ASSERT_PARAM_UNSIGNED(12);
    index++;

    ASSERT_OP_LEN(OPCODE::OFST, 9);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_SIGNED(-7000);
    ASSERT_PARAM_SIGNED(-8000);
    ASSERT_PARAM_UNSIGNED(9000);
    index++;

    ASSERT_OP_LEN(OPCODE::OFSTW, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::TALKR, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::SLIDR, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::SOLID, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::TLKR2, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    index++;

    ASSERT_OP_LEN(OPCODE::SLDR2, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    index++;

    ASSERT_OP_LEN(OPCODE::CCANM, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::FCFIX, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::ANIMB, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::TURNW, 0);
    index++;
}


void checkWalkmesh(const InstVec& insts)
{
    int index = WALKMESH_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::SLIP, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::UC, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::IDLCK, 2);
    ASSERT_PARAM_UNSIGNED(1000);
    ASSERT_PARAM_UNSIGNED(2);
    index++;

    ASSERT_OP_LEN(OPCODE::LINE, 6);
    ASSERT_PARAM_SIGNED(-1000);
    ASSERT_PARAM_SIGNED(-2000);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_SIGNED(-4000);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    index++;

    ASSERT_OP_LEN(OPCODE::LINON, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::SLINE, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_SIGNED(-7000);
    ASSERT_PARAM_SIGNED(-8000);
    ASSERT_PARAM_SIGNED(-9000);
    ASSERT_PARAM_SIGNED(-10000);
    ASSERT_PARAM_SIGNED(-11000);
    ASSERT_PARAM_SIGNED(-12000);
    index++;
}


void checkBackgnd(const InstVec& insts)
{
    int index = BACKGND_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::BGPDH, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_SIGNED(-4000);
    index++;

    ASSERT_OP_LEN(OPCODE::BGSCR, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_SIGNED(-4000);
    ASSERT_PARAM_SIGNED(-5000);
    index++;

    ASSERT_OP_LEN(OPCODE::MPPAL, 13);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    ASSERT_PARAM_UNSIGNED(11);
    ASSERT_PARAM_UNSIGNED(12);
    ASSERT_PARAM_UNSIGNED(13);
    index++;

    ASSERT_OP_LEN(OPCODE::BGON, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::BGOFF, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::BGROL, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::BGROL2, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::BGCLR, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::STPAL, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::LDPAL, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::CPPAL, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::RTPAL, 8);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    index++;

    ASSERT_OP_LEN(OPCODE::ADPAL, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    ASSERT_PARAM_UNSIGNED(11);
    ASSERT_PARAM_UNSIGNED(12);
    index++;

    ASSERT_OP_LEN(OPCODE::MPPAL2, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    ASSERT_PARAM_UNSIGNED(11);
    ASSERT_PARAM_UNSIGNED(12);
    index++;

    ASSERT_OP_LEN(OPCODE::STPLS, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::LDPLS, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::CPPAL2, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::RTPAL2, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::ADPAL2, 10);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    index++;
}


void checkCamera(const InstVec& insts)
{
    int index = CAMERA_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::NFADE, 10);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    index++;

    ASSERT_OP_LEN(OPCODE::SHAKE, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::SCRLO, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::SCRLC, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::SCRLA, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::SCR2D, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_SIGNED(-4000);
    index++;

    ASSERT_OP_LEN(OPCODE::SCRCC, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::SCR2DC, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_UNSIGNED(7000);
    index++;

    ASSERT_OP_LEN(OPCODE::SCRLW, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::SCR2DL, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_SIGNED(-5000);
    ASSERT_PARAM_SIGNED(-6000);
    ASSERT_PARAM_UNSIGNED(7000);
    index++;

    ASSERT_OP_LEN(OPCODE::VWOFT, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_SIGNED(-3000);
    ASSERT_PARAM_SIGNED(-4000);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::FADE, 10);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    index++;

    ASSERT_OP_LEN(OPCODE::FADEW, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::SCRLP, 5);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    index++;

    ASSERT_OP_LEN(OPCODE::MVCAM, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;
}


void checkAv(const InstVec& insts)
{
    int index = AV_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::BGMOVIE, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::AKAO2, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8000);
    ASSERT_PARAM_UNSIGNED(9000);
    ASSERT_PARAM_UNSIGNED(10000);
    ASSERT_PARAM_UNSIGNED(11000);
    ASSERT_PARAM_UNSIGNED(12000);
    index++;

    ASSERT_OP_LEN(OPCODE::MUSIC, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::SOUND, 4);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3000);
    ASSERT_PARAM_UNSIGNED(4);
    index++;

    ASSERT_OP_LEN(OPCODE::AKAO, 12);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9000);
    ASSERT_PARAM_UNSIGNED(10000);
    ASSERT_PARAM_UNSIGNED(11000);
    ASSERT_PARAM_UNSIGNED(12000);
    index++;

    ASSERT_OP_LEN(OPCODE::MUSVT, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::MUSVM, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::MULCK, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::BMUSC, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::CHMPH, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::PMVIE, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::MOVIE, 0);
    index++;

    ASSERT_OP_LEN(OPCODE::MVIEF, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;

    ASSERT_OP_LEN(OPCODE::FMUSC, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::CMUSC, 7);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    index++;

    ASSERT_OP_LEN(OPCODE::CHMST, 3);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    index++;
}


void checkUncat(const InstVec& insts)
{
    int index = UNCAT_BASE, paramIndex = 0;

    ASSERT_OP_LEN(OPCODE::MPDSP, 1);
    ASSERT_PARAM_UNSIGNED(1);
    index++;

    ASSERT_OP_LEN(OPCODE::SETX, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    index++;

    ASSERT_OP_LEN(OPCODE::GETX, 6);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    index++;

    ASSERT_OP_LEN(OPCODE::SEARCHX, 10);
    ASSERT_PARAM_UNSIGNED(1);
    ASSERT_PARAM_UNSIGNED(2);
    ASSERT_PARAM_UNSIGNED(3);
    ASSERT_PARAM_UNSIGNED(4);
    ASSERT_PARAM_UNSIGNED(5);
    ASSERT_PARAM_UNSIGNED(6);
    ASSERT_PARAM_UNSIGNED(7);
    ASSERT_PARAM_UNSIGNED(8);
    ASSERT_PARAM_UNSIGNED(9);
    ASSERT_PARAM_UNSIGNED(10);
    index++;
}


#undef ASSERT_OP_LEN
#undef ASSERT_OP_SUBOP_LEN
#undef ASSERT_PARAM_UNSIGNED
#undef ASSERT_PARAM_SIGNED

#undef FLOW_BASE
#undef FLOW_LABELS
#undef FLOW_OPCODES
#undef MODULE_BASE
#undef MODULE_OPCODES
#undef MATH_BASE
#undef MATH_OPCODES
#undef WINDOW_BASE
#undef WINDOW_OPCODES
#undef PARTY_BASE
#undef PARTY_OPCODES
#undef MODEL_BASE
#undef MODEL_OPCODES
#undef WALKMESH_BASE
#undef WALKMESH_OPCODES
#undef BACKGND_BASE
#undef BACKGND_OPCODES
#undef CAMERA_BASE
#undef CAMERA_OPCODES
#undef AV_BASE
#undef AV_OPCODES
#undef UNCAT_BASE
#undef UNCAT_OPCODES



TEST(FF7Field, Decomp_AllOpcodes)
//TEST(FF7Field, Decomp_AllOpcodes)
{
    // TODO:
    // this "fails", but it appears to be due to the .dat making references to scripts that don't exist
    // to get it working, the Flow section of the .dat needs to be corrected, and then the DisasmAllOpcodes test needs to be adjusted so it still works

    //std::cout << "ready" << std::endl;
   // std::cin.ignore();

    auto scriptBytes = Lzs::Decompress(BinaryReader::ReadAll("decompiler/test/ff7_all_opcodes_by_category.dat"));
    //auto scriptBytes = Lzs::Decompress(BinaryReader::ReadAll("decompiler/test/anfrst_1.dat"));

    // Remove section pointers, leave everything after the script data as this doesn't matter
    const int kNumSections = 7;
    scriptBytes.erase(scriptBytes.begin(), scriptBytes.begin() + kNumSections * sizeof(uint32));
    DummyFormatter formatter;
    SUDM::FF7::Field::DecompiledScript ds = SUDM::FF7::Field::Decompile("ff7_all_opcodes_by_category", scriptBytes, formatter, "", "EntityContainer = {}\n\n");
    ASSERT_FALSE(ds.luaScript.empty());


    std::ofstream tmp("ff7_all_opcodes_by_category.lua");
    if (!tmp.is_open())
    {
        throw std::runtime_error("Can't open ff7_all_opcodes_by_category.lua for writing");
    }

    tmp << ds.luaScript;
}
